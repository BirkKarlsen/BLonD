# coding: utf8
# Copyright 2014-2017 CERN. This software is distributed under the
# terms of the GNU General Public Licence version 3 (GPL Version 3),
# copied verbatim in the file LICENCE.md.
# In applying this licence, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as an Intergovernmental Organization or
# submit itself to any jurisdiction.
# Project website: http://blond.web.cern.ch/

"""
Unittest for llrf.filters

:Authors: **Birk Emil Karlsen-BÃ¦ck**, **Helga Timko**
"""

import unittest
import numpy as np
from scipy.constants import c

from blond.llrf.impulse_response import rectangle, triangle, \
    SPS4Section200MHzTWC
from blond.input_parameters.ring import Ring
from blond.input_parameters.rf_parameters import RFStation
from blond.beam.beam import Beam, Proton
from blond.beam.distributions import bigaussian
from blond.beam.profile import Profile, CutOptions
from blond.impedances.impedance import InducedVoltageTime, TotalInducedVoltage
from blond.llrf.cavity_feedback import SPSOneTurnFeedback, \
    CavityFeedbackCommissioning
from blond.impedances.impedance_sources import TravelingWaveCavity


class TestRectangle(unittest.TestCase):

    def test_1(self):

        tau = 1.
        time = np.array([-1, -0.75, -0.5, -0.25, 0., 0.25, 0.5, 0.75, 1])
        rect_exp = np.array([0., 0., 0.5, 1., 1., 1., 0.5, 0., 0.])
        rect_act = rectangle(time, tau)

        rect_exp = np.around(rect_exp, 12)
        rect_act = np.around(rect_act, 12)
        self.assertSequenceEqual(rect_exp.tolist(), rect_act.tolist(),
            msg="In TestRectangle test 1: rectangle arrays differ")

    def test_2(self):

        tau = 1.
        time = np.array([-0.51, -0.26, 0.01, 0.26, 0.51, 0.76, 1.01])
        rect_exp = np.array([0.5, 1., 1., 1., 0.5, 0., 0.])
        rect_act = rectangle(time, tau)

        rect_exp = np.around(rect_exp, 12)
        rect_act = np.around(rect_act, 12)
        self.assertSequenceEqual(rect_exp.tolist(), rect_act.tolist(),
            msg="In TestRectangle test 2: rectangle arrays differ")


class TestTriangle(unittest.TestCase):

    def test_1(self):

        tau = 1.
        time = np.array([-0.5, -0.25, 0., 0.25, 0.5, 0.75, 1, 1.25, 1.5])
        tri_exp = np.array([0., 0., 0.5, 0.75, 0.5, 0.25, 0., 0., 0.])
        tri_act = triangle(time, tau)

        tri_exp = np.around(tri_exp, 12)
        tri_act = np.around(tri_act, 12)
        self.assertSequenceEqual(tri_exp.tolist(), tri_act.tolist(),
            msg="In TestTriangle test 1: triangle arrays differ")

    def test_2(self):

        tau = 1.
        time = np.array([-0.01, 0.26, 0.51, 0.76, 1.01, 1.26, 1.51])
        tri_exp = np.array([0.5, 0.74, 0.49, 0.24, 0., 0., 0.])
        tri_act = triangle(time, tau)

        tri_exp = np.around(tri_exp, 12)
        tri_act = np.around(tri_act, 12)
        self.assertSequenceEqual(tri_exp.tolist(), tri_act.tolist(),
            msg="In TestTriangle test 2: triangle arrays differ")


class TestTravelingWaveCavity(unittest.TestCase):

    def test_vg(self):
        from blond.llrf.impulse_response import TravellingWaveCavity
        v_g = 0.0946+1

        with self.assertRaises(RuntimeError, msg="In TestTravelingWaveCavity,"
                               + " no exception for group velocity > 1"):

            TravellingWaveCavity(0.374, 43, 2.71e4, v_g, 2*np.pi*200.222e6)

    def test_wake(self):

        time = np.linspace(-0.1e-6, 0.7e-6, 1000)

        l_cav = 16.082
        v_g = 0.0946
        tau = l_cav/(v_g*c)*(1 + v_g)

        TWC_impedance_source = TravelingWaveCavity(l_cav**2 * 27.1e3 / 8,
                                                   200.222e6, 2*np.pi*tau)

        TWC_impedance_source.wake_calc(time-time[0])
        wake_impSource = np.around(TWC_impedance_source.wake/1e12, 10)

        TWC_impulse_response = SPS4Section200MHzTWC(df=0.2275e6)
        # omega_c not need for computation of wake function
        TWC_impulse_response.impulse_response_beam(2*np.pi*200.222e6, time)
        TWC_impulse_response.impulse_response_gen(2*np.pi*200.222e6, time)
        TWC_impulse_response.compute_wakes(time)
        wake_impResp = -np.around(TWC_impulse_response.W_beam/1e12, 10)

        self.assertListEqual(wake_impSource.tolist(), wake_impResp.tolist(),
                             msg="In TestTravelingWaveCavity test_wake: wake fields differ")

    def test_vind(self):

        # randomly chose omega_c from allowed range
        np.random.seed(1980)
        factor = np.random.uniform(0.9, 1.1)

        # round results to this digits
        digit_round = 8

        # SPS parameters
        C = 2*np.pi*1100.009        # Ring circumference [m]
        gamma_t = 18.0              # Gamma at transition
        alpha = 1/gamma_t**2        # Momentum compaction factor
        p_s = 25.92e9               # Synchronous momentum at injection [eV]
        h = 4620                    # 200 MHz system harmonic
        V = 4.5e6                   # 200 MHz RF voltage
        phi = 0.                    # 200 MHz RF phase

        # Beam and tracking parameters
        N_m = 1e5                   # Number of macro-particles for tracking
        N_b = 1.0e11                # Bunch intensity [ppb]
        N_t = 1                     # Number of turns to track

        ring = Ring(C, alpha, p_s, Proton(), n_turns=N_t)
        rf = RFStation(ring, h, V, phi)
        beam = Beam(ring, N_m, N_b)
        bigaussian(ring, rf, beam, 3.2e-9/4, seed=1234, reinsertion=True)

        n_shift = 5     # how many rf-buckets to shift beam
        beam.dt += n_shift * rf.t_rf[0,0]
        profile = Profile(beam, CutOptions=
                          CutOptions(cut_left=(n_shift-1.5)*rf.t_rf[0,0],
                                     cut_right=(n_shift+1.5)*rf.t_rf[0,0],
                                     n_slices=140))
        profile.track()

        l_cav = 16.082
        v_g = 0.0946
        tau = l_cav/(v_g*c)*(1 + v_g)
        TWC_impedance_source = TravelingWaveCavity(l_cav**2 * 27.1e3 / 8,
                                                   200.222e6, 2*np.pi*tau)

        # Beam loading by convolution of beam and wake from cavity
        inducedVoltageTWC = InducedVoltageTime(beam, profile,
                                               [TWC_impedance_source])
        induced_voltage = TotalInducedVoltage(beam, profile,
                                              [inducedVoltageTWC])
        induced_voltage.induced_voltage_sum()
        V_ind_impSource = np.around(induced_voltage.induced_voltage,
                                    digit_round)

        # Beam loading via feed-back system
        OTFB_4 = SPSOneTurnFeedback(rf, beam, profile, 4, n_cavities=1,
            Commissioning=CavityFeedbackCommissioning(open_FF=True, rot_IQ=-1), df=0.2275e6)
        OTFB_4.counter = 0  # First turn

        OTFB_4.omega_c = factor * OTFB_4.TWC.omega_r
        # Compute impulse response
        OTFB_4.TWC.impulse_response_beam(OTFB_4.omega_c, profile.bin_centers)

        # Compute induced voltage in (I,Q) coordinates
        OTFB_4.track()
        # convert back to time
        V_ind_OTFB \
            = OTFB_4.V_IND_FINE_BEAM[-OTFB_4.profile.n_slices:].real \
                * np.cos(OTFB_4.omega_c*profile.bin_centers) \
            + OTFB_4.V_IND_FINE_BEAM[-OTFB_4.profile.n_slices:].imag \
                * np.sin(OTFB_4.omega_c*profile.bin_centers)
        V_ind_OTFB = np.around(V_ind_OTFB, digit_round)

        ratio_array = np.array(V_ind_impSource.tolist()) / np.array(V_ind_OTFB.tolist())
        ratio_array = ratio_array[~np.isnan(ratio_array)]
        max_ratio = np.max(ratio_array)

        max_ratio_exp = 1.0173091867369501
        len_wo_nan_exp = 77
        self.assertAlmostEqual(max_ratio, max_ratio_exp,
                               places=digit_round,
                               msg="In TravelingWaveCavity test_vind: induced voltages differ")
        self.assertAlmostEqual(len(ratio_array), len_wo_nan_exp,
                               places=digit_round,
                               msg="In TravelingWaveCavity test_vind: induced voltages differ")

    def test_beam_fine_coarse(self):

        # Test beam impulse response and induced voltage
        # Compare on coarse and fine grid

        # Create a batch of 100 equal, short bunches at HL-LHC intensity
        ring = Ring(2*np.pi*1100.009, 1/18**2, 25.92e9, Particle=Proton())
        rf = RFStation(ring, [4620], [4.5e6], [0], n_rf=1)
        bunches = 100
        N_m = int(1e5)
        N_b = 2.3e11
        beam = Beam(ring, N_m, N_b)
        bigaussian(ring, rf, beam, 1.8e-9/4, seed=1234, reinsertion=True)
        beam2 = Beam(ring, bunches*N_m, bunches*N_b)
        bunch_spacing = 5 * rf.t_rf[0, 0]
        buckets = 5 * bunches
        for i in range(bunches):
            beam2.dt[i * N_m:(i + 1) * N_m] = beam.dt + i * bunch_spacing
            beam2.dE[i * N_m:(i + 1) * N_m] = beam.dE
        profile2 = Profile(beam2, CutOptions=CutOptions(cut_left=0,
            cut_right=bunches*bunch_spacing,n_slices=1000*buckets))
        profile2.track()

        # Calculate impulse response and induced voltage
        OTFB = SPSOneTurnFeedback(rf, beam2, profile2, 3, n_cavities=1,
            Commissioning=CavityFeedbackCommissioning(open_FF=True, rot_IQ=-1),
                                  df=0.18433333e6)
        OTFB.TWC.impulse_response_beam(OTFB.omega_c, OTFB.profile.bin_centers,
                                       OTFB.rf_centers)
        OTFB.track()

        imp_fine_meas = (OTFB.TWC.h_beam[::1000])[:100]
        imp_coarse_meas = OTFB.TWC.h_beam_coarse[:100]

        imp_fine_ref = np.array([1.0504062083e+12 + 0.0000000000e+00j,
                                 2.0781004955e+12 + 2.7183115978e+09j,
                                 2.0553850965e+12 + 5.3772054987e+09j,
                                 2.0326663360e+12 + 7.9766773057e+09j,
                                 2.0099443306e+12 + 1.0516722825e+10j,
                                 1.9872191969e+12 + 1.2997338066e+10j,
                                 1.9644910516e+12 + 1.5418519242e+10j,
                                 1.9417600113e+12 + 1.7780262770e+10j,
                                 1.9190261924e+12 + 2.0082565269e+10j,
                                 1.8962897118e+12 + 2.2325423561e+10j,
                                 1.8735506859e+12 + 2.4508834674e+10j,
                                 1.8508092314e+12 + 2.6632795838e+10j,
                                 1.8280654649e+12 + 2.8697304485e+10j,
                                 1.8053195030e+12 + 3.0702358252e+10j,
                                 1.7825714624e+12 + 3.2647954978e+10j,
                                 1.7598214597e+12 + 3.4534092708e+10j,
                                 1.7370696115e+12 + 3.6360769688e+10j,
                                 1.7143160345e+12 + 3.8127984368e+10j,
                                 1.6915608452e+12 + 3.9835735402e+10j,
                                 1.6688041604e+12 + 4.1484021645e+10j,
                                 1.6460460966e+12 + 4.3072842159e+10j,
                                 1.6232867705e+12 + 4.4602196207e+10j,
                                 1.6005262987e+12 + 4.6072083256e+10j,
                                 1.5777647978e+12 + 4.7482502976e+10j,
                                 1.5550023845e+12 + 4.8833455241e+10j,
                                 1.5322391754e+12 + 5.0124940128e+10j,
                                 1.5094752871e+12 + 5.1356957918e+10j,
                                 1.4867108362e+12 + 5.2529509093e+10j,
                                 1.4639459395e+12 + 5.3642594342e+10j,
                                 1.4411807134e+12 + 5.4696214555e+10j,
                                 1.4184152746e+12 + 5.5690370826e+10j,
                                 1.3956497397e+12 + 5.6625064451e+10j,
                                 1.3728842254e+12 + 5.7500296932e+10j,
                                 1.3501188481e+12 + 5.8316069972e+10j,
                                 1.3273537246e+12 + 5.9072385477e+10j,
                                 1.3045889714e+12 + 5.9769245560e+10j,
                                 1.2818247051e+12 + 6.0406652532e+10j,
                                 1.2590610424e+12 + 6.0984608912e+10j,
                                 1.2362980996e+12 + 6.1503117419e+10j,
                                 1.2135359936e+12 + 6.1962180977e+10j,
                                 1.1907748407e+12 + 6.2361802713e+10j,
                                 1.1680147576e+12 + 6.2701985956e+10j,
                                 1.1452558608e+12 + 6.2982734240e+10j,
                                 1.1224982669e+12 + 6.3204051301e+10j,
                                 1.0997420924e+12 + 6.3365941080e+10j,
                                 1.0769874538e+12 + 6.3468407718e+10j,
                                 1.0542344676e+12 + 6.3511455561e+10j,
                                 1.0314832504e+12 + 6.3495089159e+10j,
                                 1.0087339187e+12 + 6.3419313265e+10j,
                                 9.8598658892e+11 + 6.3284132832e+10j,
                                 9.6324137757e+11 + 6.3089553021e+10j,
                                 9.4049840113e+11 + 6.2835579191e+10j,
                                 9.1775777605e+11 + 6.2522216909e+10j,
                                 8.9501961879e+11 + 6.2149471941e+10j,
                                 8.7228404579e+11 + 6.1717350259e+10j,
                                 8.4955117347e+11 + 6.1225858036e+10j,
                                 8.2682111826e+11 + 6.0675001648e+10j,
                                 8.0409399656e+11 + 6.0064787676e+10j,
                                 7.8136992476e+11 + 5.9395222903e+10j,
                                 7.5864901923e+11 + 5.8666314312e+10j,
                                 7.3593139635e+11 + 5.7878069094e+10j,
                                 7.1321717247e+11 + 5.7030494640e+10j,
                                 6.9050646392e+11 + 5.6123598543e+10j,
                                 6.6779938704e+11 + 5.5157388601e+10j,
                                 6.4509605813e+11 + 5.4131872814e+10j,
                                 6.2239659348e+11 + 5.3047059384e+10j,
                                 5.9970110939e+11 + 5.1902956716e+10j,
                                 5.7700972210e+11 + 5.0699573420e+10j,
                                 5.5432254788e+11 + 4.9436918305e+10j,
                                 5.3163970295e+11 + 4.8115000386e+10j,
                                 5.0896130353e+11 + 4.6733828878e+10j,
                                 4.8628746583e+11 + 4.5293413201e+10j,
                                 4.6361830601e+11 + 4.3793762975e+10j,
                                 4.4095394026e+11 + 4.2234888026e+10j,
                                 4.1829448472e+11 + 4.0616798379e+10j,
                                 3.9564005551e+11 + 3.8939504264e+10j,
                                 3.7299076875e+11 + 3.7203016111e+10j,
                                 3.5034674052e+11 + 3.5407344556e+10j,
                                 3.2770808692e+11 + 3.3552500435e+10j,
                                 3.0507492397e+11 + 3.1638494786e+10j,
                                 2.8244736773e+11 + 2.9665338851e+10j,
                                 2.5982553421e+11 + 2.7633044074e+10j,
                                 2.3720953939e+11 + 2.5541622099e+10j,
                                 2.1459949925e+11 + 2.3391084776e+10j,
                                 1.9199552975e+11 + 2.1181444154e+10j,
                                 1.6939774681e+11 + 1.8912712486e+10j,
                                 1.4680626634e+11 + 1.6584902227e+10j,
                                 1.2422120423e+11 + 1.4198026033e+10j,
                                 1.0164267634e+11 + 1.1752096764e+10j,
                                 7.9070798521e+10 + 9.2471274799e+09j,
                                 5.6505686581e+10 + 6.6831314440e+09j,
                                 3.3947456317e+10 + 4.0601221211e+09j,
                                 1.1396223503e+10 + 1.3781131781e+09j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j,
                                 0.0000000000e+00 + 0.0000000000e+00j])

        imp_coarse_ref = np.array([1.0504062083e+12 + 0.0000000000e+00j,
                                   2.0781004955e+12 + 2.7183115978e+09j,
                                   2.0553850965e+12 + 5.3772054987e+09j,
                                   2.0326663360e+12 + 7.9766773057e+09j,
                                   2.0099443306e+12 + 1.0516722825e+10j,
                                   1.9872191969e+12 + 1.2997338066e+10j,
                                   1.9644910516e+12 + 1.5418519242e+10j,
                                   1.9417600113e+12 + 1.7780262770e+10j,
                                   1.9190261924e+12 + 2.0082565269e+10j,
                                   1.8962897118e+12 + 2.2325423561e+10j,
                                   1.8735506859e+12 + 2.4508834674e+10j,
                                   1.8508092314e+12 + 2.6632795838e+10j,
                                   1.8280654649e+12 + 2.8697304485e+10j,
                                   1.8053195030e+12 + 3.0702358252e+10j,
                                   1.7825714624e+12 + 3.2647954978e+10j,
                                   1.7598214597e+12 + 3.4534092708e+10j,
                                   1.7370696115e+12 + 3.6360769688e+10j,
                                   1.7143160345e+12 + 3.8127984368e+10j,
                                   1.6915608452e+12 + 3.9835735402e+10j,
                                   1.6688041604e+12 + 4.1484021645e+10j,
                                   1.6460460966e+12 + 4.3072842159e+10j,
                                   1.6232867705e+12 + 4.4602196207e+10j,
                                   1.6005262987e+12 + 4.6072083256e+10j,
                                   1.5777647978e+12 + 4.7482502976e+10j,
                                   1.5550023845e+12 + 4.8833455241e+10j,
                                   1.5322391754e+12 + 5.0124940128e+10j,
                                   1.5094752871e+12 + 5.1356957918e+10j,
                                   1.4867108362e+12 + 5.2529509093e+10j,
                                   1.4639459395e+12 + 5.3642594342e+10j,
                                   1.4411807134e+12 + 5.4696214555e+10j,
                                   1.4184152746e+12 + 5.5690370826e+10j,
                                   1.3956497397e+12 + 5.6625064451e+10j,
                                   1.3728842254e+12 + 5.7500296932e+10j,
                                   1.3501188481e+12 + 5.8316069972e+10j,
                                   1.3273537246e+12 + 5.9072385477e+10j,
                                   1.3045889714e+12 + 5.9769245560e+10j,
                                   1.2818247051e+12 + 6.0406652532e+10j,
                                   1.2590610424e+12 + 6.0984608912e+10j,
                                   1.2362980996e+12 + 6.1503117419e+10j,
                                   1.2135359936e+12 + 6.1962180977e+10j,
                                   1.1907748407e+12 + 6.2361802713e+10j,
                                   1.1680147576e+12 + 6.2701985956e+10j,
                                   1.1452558608e+12 + 6.2982734240e+10j,
                                   1.1224982669e+12 + 6.3204051301e+10j,
                                   1.0997420924e+12 + 6.3365941080e+10j,
                                   1.0769874538e+12 + 6.3468407718e+10j,
                                   1.0542344676e+12 + 6.3511455561e+10j,
                                   1.0314832504e+12 + 6.3495089159e+10j,
                                   1.0087339187e+12 + 6.3419313265e+10j,
                                   9.8598658892e+11 + 6.3284132832e+10j,
                                   9.6324137757e+11 + 6.3089553021e+10j,
                                   9.4049840113e+11 + 6.2835579191e+10j,
                                   9.1775777605e+11 + 6.2522216909e+10j,
                                   8.9501961879e+11 + 6.2149471941e+10j,
                                   8.7228404579e+11 + 6.1717350259e+10j,
                                   8.4955117347e+11 + 6.1225858036e+10j,
                                   8.2682111826e+11 + 6.0675001648e+10j,
                                   8.0409399656e+11 + 6.0064787676e+10j,
                                   7.8136992476e+11 + 5.9395222903e+10j,
                                   7.5864901923e+11 + 5.8666314312e+10j,
                                   7.3593139635e+11 + 5.7878069094e+10j,
                                   7.1321717247e+11 + 5.7030494640e+10j,
                                   6.9050646392e+11 + 5.6123598543e+10j,
                                   6.6779938704e+11 + 5.5157388601e+10j,
                                   6.4509605813e+11 + 5.4131872814e+10j,
                                   6.2239659348e+11 + 5.3047059384e+10j,
                                   5.9970110939e+11 + 5.1902956716e+10j,
                                   5.7700972210e+11 + 5.0699573420e+10j,
                                   5.5432254788e+11 + 4.9436918305e+10j,
                                   5.3163970295e+11 + 4.8115000386e+10j,
                                   5.0896130353e+11 + 4.6733828878e+10j,
                                   4.8628746583e+11 + 4.5293413201e+10j,
                                   4.6361830601e+11 + 4.3793762975e+10j,
                                   4.4095394026e+11 + 4.2234888026e+10j,
                                   4.1829448472e+11 + 4.0616798379e+10j,
                                   3.9564005551e+11 + 3.8939504264e+10j,
                                   3.7299076875e+11 + 3.7203016111e+10j,
                                   3.5034674052e+11 + 3.5407344556e+10j,
                                   3.2770808692e+11 + 3.3552500435e+10j,
                                   3.0507492397e+11 + 3.1638494786e+10j,
                                   2.8244736773e+11 + 2.9665338851e+10j,
                                   2.5982553421e+11 + 2.7633044074e+10j,
                                   2.3720953939e+11 + 2.5541622099e+10j,
                                   2.1459949925e+11 + 2.3391084776e+10j,
                                   1.9199552975e+11 + 2.1181444154e+10j,
                                   1.6939774681e+11 + 1.8912712486e+10j,
                                   1.4680626634e+11 + 1.6584902227e+10j,
                                   1.2422120423e+11 + 1.4198026033e+10j,
                                   1.0164267634e+11 + 1.1752096764e+10j,
                                   7.9070798521e+10 + 9.2471274799e+09j,
                                   5.6505686581e+10 + 6.6831314440e+09j,
                                   3.3947456317e+10 + 4.0601221211e+09j,
                                   1.1396223503e+10 + 1.3781131781e+09j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j,
                                   0.0000000000e+00 + 0.0000000000e+00j])

        np.testing.assert_allclose(-imp_fine_meas[:-7], np.conj(imp_fine_ref[:-7]), rtol=1e-8,
            atol=0, err_msg="In TestTravelingWaveCavity test_beam_fine_coarse,"
                            "mismatch in beam impulse response on fine grid")
        np.testing.assert_allclose(-imp_coarse_meas[:-7], np.conj(imp_coarse_ref[:-7]), rtol=1e-8,
            atol=0, err_msg="In TestTravelingWaveCavity test_beam_fine_coarse,"
                            "mismatch in beam impulse response on coarse grid")

        Vind_fine_meas = OTFB.V_IND_FINE_BEAM[-OTFB.profile.n_slices:]
        Vind_coarse_meas = OTFB.V_IND_COARSE_BEAM[-OTFB.n_coarse:]
        Vind_fine_meas = (Vind_fine_meas[::1000])[:100]
        Vind_coarse_meas = Vind_coarse_meas[:100]

        Vind_fine_ref = np.array([-1.2207031250000002e-10+3.1789143880208335e-11j,
                                131178.60151388485+78.87394970421155j,
                                129752.8181211322-90.9181019453888j,
                                128326.81742106336-256.97996145014j,
                                126900.60673280897-419.3113540169087j,
                                125474.19337584148-577.9120176186708j,
                                255226.18618384047-653.9077532892787j,
                                252373.60605637977-974.8382755910721j,
                                249520.6279131572-1288.3071672963238j,
                                246667.26639393842-1594.3139426497855j,
                                243813.53613907073-1892.8581414287746j,
                                372138.0533033252-2105.0653792403746j,
                                367857.8461075643-2558.4751979858834j,
                                363577.09679295105-3000.691020545318j,
                                359295.82732087007-3431.7122140396996j,
                                355014.0596534221-3851.5381838896697j,
                                481910.41726724664-4181.294424112953j,
                                476201.9357051647-4748.520367792833j,
                                470492.8045303698-5300.819341756671j,
                                464783.0530263289-5838.190629842099j,
                                459072.7104772546-6360.63356695472j,
                                584540.4076819052-6789.27358936526j,
                                577403.1875052114-7451.650085177711j,
                                570265.2468324415-8095.36634900919j,
                                563126.622269085-8720.421645252922j,
                                555987.3504213005-9326.815302139274j,
                                680026.0694096993-9835.672762030636j,
                                671459.8294209463-10574.53343188946j,
                                662892.8346619096-11291.000637957537j,
                                654325.1290595172-11985.073689020885j,
                                645756.7565411896-12656.751970466823j,
                                768366.3625485991-13227.16099458163j,
                                758371.0045892523-14023.840251015914j,
                                748374.8941906145-14794.393161465643j,
                                738378.0825999519-15538.819142933518j,
                                728380.6210647378-16257.117701789495j,
                                849561.1623463935-16870.41448406265j,
                                838136.77127185-17706.249125912247j,
                                826711.666687651-18512.225208302767j,
                                815285.9071597732-19288.342320267442j,
                                803859.5512540159-20034.600152966254j,
                                923611.2590497142-20672.124549980377j,
                                910758.1026912852-21528.455357778363j,
                                897904.3083423093-22351.196380393085j,
                                885049.9418853282-23140.347442683553j,
                                872195.0692022125-23895.908484392152j,
                                990518.3576878596-24539.00561043784j,
                                976236.8868017113-25397.17894138314j,
                                961954.890021821-26218.032568106682j,
                                947672.4405446276-27001.56661506758j,
                                933389.6115653015-27747.781334360454j,
                                1050285.0777914233-28377.803156005994j,
                                1034575.9259944832-29219.172538418698j,
                                1018866.3969639192-30019.493923078764j,
                                1003156.5712068777-30778.767797793134j,
                                987446.5292285378-31496.994790751j,
                                1102914.9530457656-32095.301720812633j,
                                1085778.9367385942-32901.22944797612j,
                                1068642.728404244-33662.38282804718j,
                                1051506.4158568582-34378.76277590101j,
                                1034370.0869078083-35050.370359532186j,
                                1148412.4308793284-35598.332850347615j,
                                1129850.5491559724-36350.19157362821j,
                                1111288.697138615-37053.55186319771j,
                                1092726.969944167-37708.41512468282j,
                                1074165.4626858567-38314.782929564666j,
                                1186782.8719868467-38793.78306546558j,
                                1166796.306531669-39472.95738661193j,
                                1146810.0290202054-40099.9117685015j,
                                1126824.141867381-40674.64817116113j,
                                1106838.7474834279-41197.168733196006j,
                                1218032.549787476-41588.60182207625j,
                                1196622.664758973-42176.48988459659j,
                                1175213.3623916404-42708.43940154292j,
                                1153804.7523931465-43184.452950947714j,
                                1132396.9444653497-43604.53330213746j,
                                1242168.6498178714-43889.80946601686j,
                                1219336.9917194897-44367.82454552911j,
                                1196506.2474520772-44786.185690316415j,
                                1173676.534010256-45144.89615997677j,
                                1150847.968381616-45443.95941810828j,
                                1259199.269060269-45604.50518259094j,
                                1234947.5665982214-45954.077276045005j,
                                1210697.1455592918-46240.28358049095j,
                                1186448.1302187433-46463.12810060082j,
                                1162200.6448434852-46622.615057743795j,
                                1269133.415205599-46639.87494026388j,
                                1243463.579133699-46842.45235393691j,
                                1217795.4284668239-46977.955976626974j,
                                1192129.0947540489-47046.390621537175j,
                                1166464.7095346658-47047.761331251466j,
                                1271981.0058516941-46903.199428010885j,
                                1244895.1288032124-46940.25036416771j,
                                1217846.3635004445-46945.66181566459j,
                                1192129.0947540489-47046.39062153608j,
                                1166464.709534666-47047.761331250695j,
                                1271981.0058516941-46903.19942800977j,
                                1244895.1288032127-46940.2503641668j,
                                1217846.3635004442-46945.66181566361j,
                                1192129.0947540486-47046.390621535196j])

        Vind_coarse_ref = np.array([65950.40348525057+46.2049471344866j,
                                    130474.94453325644-79.26001813408367j,
                                    129048.86111183449-247.19950684277995j,
                                    127622.56402583786-411.4082906582993j,
                                    126196.06059522227-571.8861011480626j,
                                    190719.76162552668-682.4277355118467j,
                                    253817.40851485616-960.9078103881858j,
                                    250964.246551918-1278.1307066826496j,
                                    248110.6938627261-1587.8909786983663j,
                                    245256.7650886458-1890.1881534069562j,
                                    308352.8783568539-2138.816836180602j,
                                    370022.7823873-2551.6514645992165j,
                                    365741.7297907233-2999.4962532783034j,
                                    361460.14601533394-3436.145602999889j,
                                    357178.05302483914-3861.59889998365j,
                                    418845.8762688806-4229.650621618672j,
                                    479087.37178997614-4758.175090271536j,
                                    473377.7995215146-5317.9764181137j,
                                    467667.5922344177-5862.848916251754j,
                                    461956.7792151436-6392.791894000076j,
                                    522195.79323610483-6861.599764611609j,
                                    581008.3976625882-7487.146799085436j,
                                    573869.8597507292-8140.237070994834j,
                                    566730.6195941532-8774.664865617618j,
                                    559590.7138019578-9390.429479207238j,
                                    618400.5824691094-9941.325324724714j,
                                    675783.9962833433-10645.226685645472j,
                                    667216.2298231166-11372.93766078711j,
                                    658647.7305042288-12078.252573439016j,
                                    650078.5422577821-12761.17077063415j,
                                    707459.1125005595-13375.48672887903j,
                                    763413.2192419023-14139.074807962172j,
                                    753416.1443816418-14922.739195779628j,
                                    743418.3426566995-15680.274317465002j,
                                    733419.8653190283-16411.6796346603j,
                                    789371.1671059667-17070.749751246123j,
                                    843896.0333470969-17875.359167148446j,
                                    832469.7532621565-18696.312223164718j,
                                    821042.7889076164-19487.403510092045j,
                                    809615.1988546016-20248.632667998343j,
                                    864137.4451592251-20933.7944919511j,
                                    917233.3204694241-21760.76368582412j,
                                    904378.1213228515-22600.34480712208j,
                                    891522.3170934338-23406.33267610856j,
                                    878665.9736692684-24178.727175076103j,
                                    931759.5604229395-24871.323354073676j,
                                    983426.8773183319-25701.996184713542j,
                                    969143.2282085026-26541.550504993815j,
                                    954859.0897822159-27343.7814284262j,
                                    940574.535241823-28108.689143304677j,
                                    992240.0412735534-28790.06901843233j,
                                    1042479.4151543118-29605.796356926254j,
                                    1026767.9680495249-30426.6763410405j,
                                    1011056.1839596587-31206.50444129123j,
                                    995344.1433980756-31945.281215724644j,
                                    1045582.3303613059-32596.802415643393j,
                                    1094394.5594358223-33378.94373940957j,
                                    1077256.1490958687-34162.51077726591j,
                                    1060117.5906499529-34901.2994204606j,
                                    1042978.9719186866-35595.3106605136j,
                                    1091790.7842050341-36198.340694941304j,
                                    1139176.849401066-36928.26568105846j,
                                    1120612.4932857666-37655.89168079818j,
                                    1102048.2144715087-38335.01506983463j,
                                    1083484.1080818686-38965.637336848435j,
                                    1130870.672721857-39501.55518924949j,
                                    1176831.7375846507-40160.64530697719j,
                                    1156842.6357493803-40813.71428731974j,
                                    1136853.8731275823-41414.55905403415j,
                                    1116865.5521409942-41963.18165661024j,
                                    1162828.1786917658-42413.379375992j,
                                    1207365.589269169-42983.02947837653j,
                                    1185953.1242473626-43542.9391600305j,
                                    1164541.2968318283-44046.905956409195j,
                                    1143130.216737142-44494.93254141841j,
                                    1187670.3971571636-44840.81683313399j,
                                    1230785.6818717269-45302.43674759872j,
                                    1207951.4185443865-45750.60014363742j,
                                    1185118.1276688275-46139.10523197329j,
                                    1162285.9262466202-46467.955374488396j,
                                    1205405.3347573874-46690.94918994069j,
                                    1247100.2042654753-47025.965307759754j,
                                    1222845.8897176762-47343.81231285848j,
                                    1198592.918889621-47598.28915474838j,
                                    1174341.416063511-47789.39994679762j,
                                    1216041.9089982659-47870.94407194583j,
                                    1256318.2560361722-48060.80093649729j,
                                    1230645.8194005862-48229.77991493121j,
                                    1204975.1341423069-48331.68075901377j,
                                    1179306.331817284-48366.5083970547j,
                                    1219589.9474567485-48288.063039618624j,
                                    1258449.8466738376-48314.224933317695j,
                                    1231361.3989612798-48315.80430561786j,
                                    1204975.1341423069-48331.680759012925j,
                                    1179306.331817284-48366.50839705377j,
                                    1219589.9474567485-48288.063039617744j,
                                    1258449.8466738376-48314.22493331665j,
                                    1231361.3989612798-48315.80430561691j,
                                    1204975.1341423069-48331.680759011935j,
                                    1179306.3318172842-48366.508397052814j])

        np.testing.assert_allclose(Vind_fine_meas, Vind_fine_ref, rtol=1e-8,
            atol=1e-9, err_msg="In TestTravelingWaveCavity test_beam_fine_coarse,"
                            "mismatch in beam-induced voltage on fine grid")
        np.testing.assert_allclose(Vind_coarse_meas, Vind_coarse_ref, rtol=1e-8,
            atol=0, err_msg="In TestTravelingWaveCavity test_beam_fine_coarse,"
                            "mismatch in beam-induced voltage on coarse grid")


if __name__ == '__main__':

    unittest.main()
